Console.WriteLine(new List<string[]>(){File.ReadAllLines("input.txt")}.Select(j => j.Select(line => line.Select<char,bool[]>(c => c == '|' ? [true,false,true,false] : c == '-' ? [false,true,false,true] : c == 'L' ? [true,true,false,false] : c == 'J' ? [true,false,false,true] : c == '7' ? [false,false,true,true] : c == 'F' ? [false,true,true,false] : c == '.' ? [false,false,false,false] : [true,true,true,true]))).Select(j => new Dictionary<Tuple<int,int>, bool[]>(j.SelectMany((line,row) => line.Select((c,column) => new KeyValuePair<Tuple<int,int>,bool[]>(new(column,row), c))))).Select(j => new{dict = j, s = j.First(c => c.Value.All(t => t)).Key}).Select(j => new{j.s, dict = new Dictionary<Tuple<int,int>, bool[]>(j.dict.Keys.Select(c => new KeyValuePair<Tuple<int, int>, bool[]>(c, [j.dict[c][0] && j.dict.ContainsKey(new(c.Item1,c.Item2-1)) && j.dict[new(c.Item1,c.Item2-1)][2], j.dict[c][1] && j.dict.ContainsKey(new(c.Item1+1,c.Item2)) && j.dict[new(c.Item1+1, c.Item2)][3], j.dict[c][2] && j.dict.ContainsKey(new(c.Item1,c.Item2+1)) && j.dict[new(c.Item1, c.Item2+1)][0], j.dict[c][3] && j.dict.ContainsKey(new(c.Item1-1,c.Item2)) && j.dict[new(c.Item1-1,c.Item2)][1]])))}).Select(j => new{circuit = Enumerable.Range(0, j.dict.Keys.Count).Aggregate(new List<Tuple<int,int>>(){j.s}, (previous, current) => (j.dict[previous.Last()][0] && !previous.Contains(new(previous.Last().Item1, previous.Last().Item2 - 1))) ? [..previous, new(previous.Last().Item1, previous.Last().Item2 - 1)] : (j.dict[previous.Last()][1] && !previous.Contains(new(previous.Last().Item1+1, previous.Last().Item2))) ? [..previous, new(previous.Last().Item1+1, previous.Last().Item2)] : (j.dict[previous.Last()][2] && !previous.Contains(new(previous.Last().Item1, previous.Last().Item2+1))) ? [..previous, new(previous.Last().Item1, previous.Last().Item2+1)] : (j.dict[previous.Last()][3] && !previous.Contains(new(previous.Last().Item1-1, previous.Last().Item2)))? [..previous, new(previous.Last().Item1-1, previous.Last().Item2)] : previous), j.dict}).Select(j => j.dict.Keys.GroupBy(r => r.Item2).OrderBy(r => r.First().Item2).Aggregate(new List<List<int>>(), (pre, row) => [.. pre, row.OrderBy(r => r.Item1).Aggregate(new Tuple<List<int>,bool,bool,bool>([], true, false, true), (previous, column) => j.circuit.Contains(column)?((j.dict[column][0] && j.dict[column][2])?(new([..previous.Item1, 2], !previous.Item2, previous.Item3, previous.Item4)) : (j.dict[column][1] && j.dict[column][2]) ? new([..previous.Item1, 2], previous.Item2, true, true):j.dict[column][3] && j.dict[column][0] && previous.Item3 && previous.Item4? new([..previous.Item1, 2], !previous.Item2, false, false) :j.dict[column][0] && j.dict[column][1]?new([..previous.Item1, 2], previous.Item2, true, false):j.dict[column][3] && j.dict[column][2] && previous.Item3 && !previous.Item4?new([..previous.Item1, 2], !previous.Item2, false, false):new([..previous.Item1, 2], previous.Item2, previous.Item3, previous.Item4)):new([..previous.Item1, previous.Item2?0:1], previous.Item2, false, false)).Item1])).First().Sum(r => r.Count(w => w == 1)));